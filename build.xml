<!--

-->
<project basedir="." default="dist" name="swift" xmlns:adapter="uri:adapter" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property file="build.properties"/>
  <property file="ivy.properties"/>
  <import file="${basedir}/../resources/ant-ivy-includes.xml"/>

  <tstamp>
    <format property="today" pattern="yyyy-MM-dd" locale="en"/>
  </tstamp>

  <target name="init" description="Initialisation">

    <property name="ivy.publish.revision" value="3.1-SNAPSHOT"/>  <!-- Version number of this artifact -->
    <property name="adp-core-version" value="3.1-SNAPSHOT"/>
    <property name="manifest.title" value="Interlok Swift Transformations"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>

    <property name="project.dist.dir" value="${build.dir}/dist"/>
    <property name="project.name" value = "adp-${ant.project.name}"/>
    <property name="project.dir" value = "${basedir}"/>
    <property name="project.resources" value="${resources.dir}"/>
    <property name="project.jar.name" value = "${project.name}.jar"/>
    <property name="example.xml.dir" value="${build.dir}/example-xml"/>

	<property name="src.dir" value="${basedir}/src"/>

    <property name="testsrc.dir" value="${basedir}/test/src"/>
    <property name="build.dir" value="${basedir}/build"/>
    <property name="example-xml.build.dir"  value="${build.dir}/example-xml"/>
    <property name="resources.dir" value="${basedir}/resources"/>
    <property name="test.resources.dir" value="${basedir}/test/src/resources"/>

    <property name="classes.build.dir" value="${build.dir}/classes"/>
    <property name="testclasses.build.dir" value="${build.dir}/testclasses"/>
    <property name="doc.dir" value="${basedir}/docs"/>
    <property name="api.doc.dir" value="${build.dir}/api"/>
    <property name="tests.output.dir" value="${basedir}/testoutput"/>
    <property name="html.tests.output.dir" value="${tests.output.dir}/html"/>
    <property name="jar.version" value="${today}"/>
    <property name="javac.version" value="1.7"/>
    <property name="javac.include.classes"  value="**/*.java" />
    <property name="junit.test.classes"     value="**/*Test*.java" />

	<property name="build.tmp.dir" value="${build.dir}/tmp"/>

    <property name="project.jar.name" value = "${project.name}.jar"/>

    <property name="tmp.jar.name" value = "${project.name}-tmp.jar"/>
    <property name="yguard.report" value="${build.dir}/${project.name}-${jar.version}.yguard.xml.gz"/>

  </target>

  <target name="clean" depends="init" description="Delete compiled Objects">
    <delete dir="${build.dir}"/>
    <delete dir="${tests.output.dir}"/>
    <delete>
      <fileset file="${coverage.metadata.file}"/>

    </delete>
  </target>

  <target name="prepare" depends="init, prepare-ivy">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${example-xml.build.dir}"/>
    <mkdir dir="${classes.build.dir}"/>
    <mkdir dir="${testclasses.build.dir}"/>
    <mkdir dir="${build.tmp.dir}"/>
    <mkdir dir="${project.dist.dir}"/>
  </target>

  <target name="compile" depends="prepare" description="Compile">
    <javac source="${javac.version}" target="${javac.version}" destdir="${classes.build.dir}" srcdir="${src.dir}" debug="on" debuglevel="source,lines">
      <classpath refid="main.classpath"/>
    </javac>
  </target>

  <target name="jar.resources" depends="prepare">
    <!-- build the manifest file -->
    <adapter:create-manifest file="${build.dir}/Manifest.mf" title="${manifest.title}"/>
  </target>

  <target name="jar" depends="compile, jar.resources" description="Build a jar file">
    <adapter:create-jar basedir="${classes.build.dir}" jarfile="${project.dist.dir}/${project.jar.name}" manifest="${build.dir}/Manifest.mf" version-title="${manifest.title}"/>
  </target>

  <target name="javadoc" depends="prepare-ivy" description="Create javadocs">
    <adapter:ydoc-javadoc-creator sourcepath="${src.dir}" destdir="${api.doc.dir}">
      <groups>
        <group title="Interlok Swift Messaging" packages="com.adaptris.core.transform.swift:com.adaptris.core.transform.swift.*"/>
      </groups>
    </adapter:ydoc-javadoc-creator>
  </target>

  <!-- Perform a release, make sure you set dist.filename -->
  <target name="dist" depends="jar, javadoc" description="Create a distribution">
    <mkdir dir="${build.tmp.dir}/dist/lib"/>
    <mkdir dir="${project.dist.dir}"/>
    <delete file="${dist.filename}"/>
    <copy todir="${build.tmp.dir}/dist/lib" preservelastmodified="true" verbose="true">
      <fileset dir="${project.dist.dir}">
        <include name="${project.jar.name}" />
      </fileset>
    </copy>
    <zip destfile="${dist.filename}">
      <zipfileset dir="${build.tmp.dir}/dist/lib" prefix="lib"/>
      <zipfileset dir="${api.doc.dir}" prefix="docs/${ant.project.name}/api"/>
    </zip>
  </target>

  <target name="compile_tests" depends="compile, jar">
    <mkdir dir="${testclasses.build.dir}"/>
    <javac source="${javac.version}" target="${javac.version}" destdir="${testclasses.build.dir}" srcdir="${testsrc.dir}" debug="on" debuglevel="source,lines,vars">
      <classpath id="classpath.compiletests">
        <pathelement path="${classes.build.dir}"/>
        <path refid="main.classpath"/>
      </classpath>
    </javac>
    <!-- Source our test property files, relying on ant property immutability.
      -->
    <property file="${test.resources.dir}/unit-tests.properties.template"/>
    <echoproperties destfile="${testclasses.build.dir}/unit-tests.properties" prefix="junit."/>
    <replace file="${testclasses.build.dir}/unit-tests.properties" token="junit." value=""/>
  </target>

  <target name="init.tests" depends="compile_tests">
    <!-- clean up old reports -->
    <delete dir="${tests.output.dir}"/>
    <mkdir dir="${tests.output.dir}"/>
    <mkdir dir="${html.tests.output.dir}"/>
  </target>

  <target name="test" depends="run-tests" description="run tests">
    <adapter:test-reports basedir="${tests.output.dir}" reportdir="${html.tests.output.dir}"/>
    <fail message="JUNIT tests failed, check output in ${tests.output.dir}" if="junit.failed"/>
  </target>

  <target name="run-tests" depends="init.tests">
    <adapter:execute-tests printsummary="true" fork="yes" showoutput="no" forkmode="once"/>
  </target>

  <target name="test-no-reports" depends="run-tests" description="Run Tests with No reports">
    <fail message="JUNIT tests failed, check output in ${tests.output.dir}" if="junit.failed"/>
  </target>

  <target name="example-xml.zip" depends="init" description="Build the example xml zip file">
    <zip destfile = "${example-xml.doc.zip}" basedir="${example-xml.build.dir}" />
  </target>

</project>